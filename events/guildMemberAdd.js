const { sendWelcomeMessage } = require('../commands/server/setWelcomeMessage');

module.exports = {
    name: 'guildMemberAdd',
    once: false,
    async execute(member, client) {
        try {
            // Logs d√©taill√©s pour le d√©bogage
            console.log(`üîî √âv√©nement guildMemberAdd d√©clench√©`);
            console.log(`üëã Nouveau membre: ${member.user.tag} (${member.id}) a rejoint ${member.guild.name} (${member.guild.id})`);
            console.log(`‚ÑπÔ∏è Type de membre: ${member.user.bot ? 'Bot' : 'Utilisateur'}`);
            
            // V√©rifier que le client est bien d√©fini et disponible
            if (!client) {
                console.error(`‚ùå Erreur: Le client n'est pas disponible dans l'√©v√©nement guildMemberAdd`);
                return;
            }
            
            // V√©rifier la configuration du syst√®me de bienvenue
            console.log(`üîç Recherche de configuration pour le serveur ${member.guild.id}`);
            const welcomeConfig = client.welcomeConfig || new Map();
            
            // Logs de d√©bogage pour la configuration
            console.log(`üìä √âtat de la configuration: ${welcomeConfig instanceof Map ? 'Map valide' : 'Invalide'}`);
            console.log(`üìã Nombre de serveurs configur√©s: ${welcomeConfig.size}`);
            console.log(`üîë Serveurs configur√©s: ${Array.from(welcomeConfig.keys()).join(', ') || 'Aucun'}`);
            
            // R√©cup√©rer la configuration sp√©cifique au serveur
            const serverConfig = welcomeConfig.get(member.guild.id);
            console.log(`‚öôÔ∏è Configuration trouv√©e pour ${member.guild.name}: ${serverConfig ? 'Oui' : 'Non'}`);
            
            // Si aucune configuration n'est trouv√©e, on sort
            if (!serverConfig) {
                console.log(`‚ÑπÔ∏è Aucune configuration de bienvenue trouv√©e pour ${member.guild.name}`);
                return;
            }
            
            // V√©rifier si la configuration est activ√©e
            console.log(`üîå √âtat du syst√®me: ${serverConfig.enabled ? 'Activ√©' : 'D√©sactiv√©'}`);
            if (!serverConfig.enabled) {
                console.log(`‚ÑπÔ∏è Les messages de bienvenue sont d√©sactiv√©s pour ${member.guild.name}`);
                return;
            }
            
            // V√©rifier si un salon a √©t√© configur√©
            if (!serverConfig.channelId) {
                console.error(`‚ùå Erreur: Aucun salon configur√© pour les messages de bienvenue sur ${member.guild.name}`);
                return;
            }
            
            // R√©cup√©rer le salon de bienvenue
            console.log(`üîç Recherche du salon: ${serverConfig.channelId}`);
            const welcomeChannel = member.guild.channels.cache.get(serverConfig.channelId);
            
            if (!welcomeChannel) {
                console.error(`‚ùå Erreur: Salon de bienvenue introuvable (ID: ${serverConfig.channelId}) pour ${member.guild.name}`);
                
                // Option: D√©sactiver automatiquement les messages de bienvenue si le salon n'existe plus
                serverConfig.enabled = false;
                welcomeConfig.set(member.guild.id, serverConfig);
                client.welcomeConfig = welcomeConfig;
                console.log(`‚ö†Ô∏è Messages de bienvenue d√©sactiv√©s pour ${member.guild.name} car le salon n'existe plus`);
                return;
            }
            
            // V√©rifier les permissions dans le salon
            const permissions = welcomeChannel.permissionsFor(member.guild.members.me);
            if (!permissions.has('SendMessages') || !permissions.has('EmbedLinks')) {
                console.error(`‚ùå Erreur: Permissions insuffisantes dans #${welcomeChannel.name} pour ${member.guild.name}`);
                return;
            }
            
            console.log(`üì® Tentative d'envoi du message de bienvenue pour ${member.user.tag} dans #${welcomeChannel.name}`);
            
            // Tentative d'envoi avec jusqu'√† 3 essais
            let success = false;
            let attempts = 0;
            const maxAttempts = 3;
            
            while (!success && attempts < maxAttempts) {
                attempts++;
                console.log(`üîÑ Tentative ${attempts}/${maxAttempts} d'envoi du message de bienvenue`);
                
                try {
                    await sendWelcomeMessage(member, welcomeChannel, serverConfig);
                    success = true;
                    console.log(`‚úÖ Message de bienvenue envoy√© pour ${member.user.tag} dans #${welcomeChannel.name} (tentative ${attempts})`);
                } catch (err) {
                    console.error(`‚ùå √âchec de la tentative ${attempts}: ${err.message}`);
                    
                    // Attendre avant de r√©essayer
                    if (attempts < maxAttempts) {
                        console.log(`‚è±Ô∏è Attente de 1 seconde avant la prochaine tentative...`);
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                }
            }
            
            if (!success) {
                console.error(`‚ùå Impossible d'envoyer le message de bienvenue apr√®s ${maxAttempts} tentatives`);
            } else {
                // Notifications suppl√©mentaires en cas de succ√®s
                try {
                    if (member.guild.systemChannel && !member.user.bot) {
                        await member.guild.systemChannel.send({
                            content: `Les messages de bienvenue sont activ√©s! Un message a √©t√© envoy√© dans <#${welcomeChannel.id}> pour accueillir ${member.user.tag}.`,
                            allowedMentions: { parse: [] }  // √âviter les mentions
                        }).catch(() => {}); // Ignorer les erreurs ici
                    }
                } catch (notifError) {
                    console.error(`‚ùå Erreur lors de l'envoi de la notification: ${notifError.message}`);
                }
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur lors du traitement de l'√©v√©nement guildMemberAdd:`, error);
            
            // Essayer d'envoyer une notification d'erreur aux d√©veloppeurs
            try {
                const errorGuild = client.guilds.cache.first();
                if (errorGuild && errorGuild.systemChannel) {
                    errorGuild.systemChannel.send({
                        content: `‚ö†Ô∏è **Erreur de syst√®me de bienvenue**: Une erreur est survenue lors du traitement d'un nouvel arrivant. V√©rifiez les logs du bot.`,
                        allowedMentions: { parse: [] }
                    }).catch(() => {});
                }
            } catch (e) {
                console.error(`‚ùå Impossible d'envoyer la notification d'erreur:`, e);
            }
        }
    },
};
